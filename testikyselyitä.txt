* Kannan luominen

createuser --pwprompt --interactive fipug

# Lisää fipug-käyttäjän salasana .pgpass-tiedostoon (https://wiki.postgresql.org/wiki/Pgpass),
# jotta alla oleva ogr2ogr-komento toimisi sellaisenaan.

createdb -U postgres -h localhost -p 5432 --owner=fipug fipug

psql -U postgres -h localhost -p 5432 -d fipug -c "create extension postgis"
psql -U postgres -h localhost -p 5432 -d fipug -c "create extension postgis_topology"
psql -U postgres -h localhost -p 5432 -d fipug -c "GRANT ALL ON SCHEMA topology TO fipug"
psql -U postgres -h localhost -p 5432 -d fipug -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA topology TO fipug"
psql -U postgres -h localhost -p 5432 -d fipug -c "GRANT ALL ON ALL SEQUENCES IN SCHEMA topology TO fipug"

psql -U fipug -h localhost -p 5432 -d fipug -c "CREATE SCHEMA statfi"

psql -U fipug -h localhost -p 5432 -d fipug -c "ALTER DATABASE fipug SET search_path = statfi, public, topology, pno_meri_topo"


# http://www.stat.fi/tup/rajapintapalvelut/paavo.html

# http://geo.stat.fi/geoserver/postialue/postialue:pno_meri/wfs

# http://anitagraser.com/2012/09/29/wfs-to-postgis-in-one-step/

$ ogrinfo -ro "WFS:http://geo.stat.fi/geoserver/postialue/postialue:pno_meri/wfs"
INFO: Open of `WFS:http://geo.stat.fi/geoserver/postialue/postialue:pno_meri/wfs'
      using driver `WFS' successful.
1: postialue:pno_meri (Multi Polygon)

$ ogr2ogr -overwrite -f PostgreSQL PG:"user=fipug host=localhost port=5432 dbname=fipug" "WFS:http://geo.stat.fi/geoserver/postialue/postialue:pno_meri/wfs" -nln pno_meri postialue:pno_meri


psql -U fipug -h localhost -p 5432 -d fipug

\d statfi.pno_meri
                                         Table "statfi.pno_meri"
    Column    |            Type             |                         Modifiers                          
--------------+-----------------------------+------------------------------------------------------------
 ogc_fid      | integer                     | not null default nextval('pno_meri_ogc_fid_seq'::regclass)
 wkb_geometry | geometry(MultiPolygon,3067) | 
 gml_id       | character varying           | 
 posti_alue   | character varying           | 
 nimi         | character varying           | 
 namn         | character varying           | 
 kunta        | character varying           | 
 kuntanro     | integer                     | 
 vuosi        | integer                     | 
 pinta_ala    | double precision            | 
 shape_star   | double precision            | 
 shape_stle   | double precision            | 
 topogeom     | topogeometry                | 
 geom_simp    | geometry(MultiPolygon,3067) | 
 geom_bork    | geometry(MultiPolygon,3067) | 
 geom_buffer  | geometry(MultiPolygon,3067) | 
Indexes:
    "pno_meri_pk" PRIMARY KEY, btree (ogc_fid)
    "pno_meri_geom_idx" gist (wkb_geometry)
Check constraints:
    "check_topogeom_topogeom" CHECK ((topogeom).topology_id = 1 AND (topogeom).layer_id = 1 AND (topogeom).type = 3)


SELECT * FROM geometry_columns ;
 f_table_catalog | f_table_schema | f_table_name | f_geometry_column | coord_dimension | srid |     type     
-----------------+----------------+--------------+-------------------+-----------------+------+--------------
 fipug           | statfi         | pno_meri     | wkb_geometry      |               2 | 3067 | MULTIPOLYGON
(1 row)


SELECT sum(ST_Area(wkb_geometry)) / 1000000.0 AS km2 FROM statfi.pno_meri;
       km2        
------------------
 390815.261762989
(1 row)



WITH pno_union AS (
    SELECT ST_Union(wkb_geometry) AS geom FROM statfi.pno_meri
)
SELECT ST_Difference(ST_Envelope(pno_union.geom), pno_union.geom) FROM pno_union;


SELECT CreateTopology('pno_meri_topo', 3067);
 createtopology 
----------------
              1
(1 row)

Time: 667.609 ms



SELECT AddTopoGeometryColumn('pno_meri_topo', 'statfi', 'pno_meri', 'topogeom', 'MULTIPOLYGON');
 addtopogeometrycolumn 
-----------------------
                     1
(1 row)

Time: 22.885 ms



SET client_min_messages TO WARNING;

UPDATE statfi.pno_meri SET topogeom = toTopoGeom(wkb_geometry, 'pno_meri_topo', 1);

ALTER TABLE statfi.pno_meri ADD COLUMN geom_simp geometry(Multipolygon,3067);
UPDATE statfi.pno_meri SET geom_simp = ST_Simplify(topogeom, 500);

ALTER TABLE statfi.pno_meri ADD COLUMN geom_bork geometry(Multipolygon,3067);
UPDATE statfi.pno_meri SET geom_bork = ST_Multi(ST_SimplifyPreserveTopology(wkb_geometry, 500));

ALTER TABLE statfi.pno_meri ADD COLUMN geom_buffer geometry(Multipolygon,3067);
UPDATE statfi.pno_meri SET geom_buffer = ST_Multi(ST_Buffer(ST_Boundary(wkb_geometry), 500));

# Avaa tasot esim. QGIS:llä: http://qgis.org/

* Testikyselyjä

java -jar SQLxMap/SQLxMap.jar

--
-- Taustakartta: postinumeroalueet
--
SELECT wkb_geometry FROM statfi.pno_meri;

-- Monikulmio
SELECT ST_Transform('SRID=4326;POLYGON((29 70, 35 85, 20 85, 23 70, 29 70))'::geometry, 900913);

-- Murtoviiva
SELECT ST_Transform('SRID=4326;LINESTRING(29 70, 29 85)'::geometry, 900913);

-- Piste
SELECT ST_Transform('SRID=4326;POINT(27 70)'::geometry, 900913);

--
-- Testaa hallintoalueiden koodeja (admin_level).
--
SELECT * FROM osm.osm_polygon
WHERE boundary = 'administrative'
  AND admin_level::int IN (5, 6, 7, 8);
  
SELECT * FROM osm.osm_polygon
WHERE boundary = 'administrative'
  AND admin_level::int IN (8);

--
-- Helsinki
--
SELECT * FROM osm.osm_polygon WHERE boundary = 'administrative' AND admin_level = '8' AND name = 'Helsinki';


-- Monikulmio
SELECT 'SRID=4326;POLYGON((29 70, 35 85, 20 85, 23 70, 29 70))'::geometry;

-- Murtoviiva
SELECT 'SRID=4326;LINESTRING(29 70, 29 85)'::geometry;

-- Piste
SELECT 'SRID=4326;POINT(27 70)'::geometry;

--
-- Taustakartta
--
SELECT way FROM osm.osm_polygon WHERE boundary = 'administrative' AND admin_level::int < 3;

--
-- Hae Helsinki ja rekursiivisesti kaikki kunnat, joiden alueet'koskettavat'
-- Helsingin aluetta, ts. niiden leikkaus on piste tai viiva.
--
-- Rekursion päättymisehto on tässä: t.n < 5
--
-- Varoitus! Suoritusaika kasvaa eksponentiaalisesti, ei kannata kokeilla
-- syvällä rekursiolla.
--
WITH RECURSIVE t(the_geom, n) AS (
     SELECT osm_polygon.way, 1 FROM osm.osm_polygon WHERE boundary = 'administrative' AND admin_level = '8' AND name = 'Helsinki'
   UNION ALL
     SELECT osm_polygon.way, t.n + 1 
     FROM osm.osm_polygon, t
         WHERE ST_Touches(t.the_geom, osm_polygon.way) AND t.n < 5
)
SELECT ST_Union(the_geom) FROM t
GROUP BY t.n
ORDER BY t.n DESC;

--
-- Tornion naapurikunnat OpenStreetMap (ST_Overlaps(ST_Boundary(way), ...)
--
WITH RECURSIVE t(osm_id, the_geom, name, n, visited, cycle) AS (
     SELECT osm_polygon.osm_id, osm_polygon.way, osm_polygon.name, 1, ARRAY[]::bigint[], false
     FROM osm.osm_polygon
     WHERE osm_polygon.boundary = 'administrative'
       AND osm_polygon.admin_level = '8'
       AND osm_polygon.name = 'Tornio'
   UNION ALL
     SELECT osm_polygon.osm_id, osm_polygon.way, osm_polygon.name, t.n + 1, t.visited || t.osm_id, t.osm_id = ANY(t.visited)
     FROM osm.osm_polygon, t
         WHERE t.the_geom && osm_polygon.way
	   AND osm_polygon.boundary = 'administrative'
	   AND osm_polygon.admin_level = '8'
	   AND ST_Overlaps(ST_Boundary(t.the_geom), ST_Boundary(osm_polygon.way))
	   AND t.osm_id != osm_polygon.osm_id
	   AND NOT ARRAY[osm_polygon.osm_id] <@ t.visited
	   AND t.n < 5
	   AND NOT cycle
)
SELECT name, the_geom FROM t;

--
-- Tornion naapurikunnat OpenStreetMap (ST_Touches(way), ...)
-- Huom. kysely voi epäonnistua, jos jokin geometria on viallinen
-- (ST_Valid(way) = false)
--
WITH RECURSIVE t(osm_id, the_geom, name, n, visited, cycle) AS (
     SELECT osm_polygon.osm_id, osm_polygon.way, osm_polygon.name, 1, ARRAY[]::bigint[], false
     FROM osm.osm_polygon
     WHERE osm_polygon.boundary = 'administrative'
       AND osm_polygon.admin_level = '8'
       AND osm_polygon.name = 'Tornio'
   UNION ALL
     SELECT osm_polygon.osm_id, osm_polygon.way, osm_polygon.name, t.n + 1, t.visited || t.osm_id, t.osm_id = ANY(t.visited)
     FROM osm.osm_polygon, t
         WHERE t.the_geom && osm_polygon.way
	   AND osm_polygon.boundary = 'administrative'
	   AND osm_polygon.admin_level = '8'
	   AND ST_Touches(t.the_geom, osm_polygon.way)
	   AND t.osm_id != osm_polygon.osm_id
	   AND NOT ARRAY[osm_polygon.osm_id] <@ t.visited
	   AND t.n < 5
	   AND NOT cycle
)
SELECT name, the_geom FROM t;

--
-- 00100 Postinumeroalueet
--
WITH RECURSIVE t(ogc_fid, the_geom, posti_alue, nimi, namn, n, visited, cycle) AS (
     SELECT pno_meri.ogc_fid, pno_meri.wkb_geometry, pno_meri.posti_alue, pno_meri.nimi, pno_meri.namn, 
         1, ARRAY[]::int[], false
     FROM statfi.pno_meri
     WHERE pno_meri.posti_alue = '00100'
   UNION ALL
     SELECT pno_meri.ogc_fid, pno_meri.wkb_geometry, pno_meri.posti_alue, pno_meri.nimi, pno_meri.namn, 
         t.n + 1, t.visited || t.ogc_fid, t.ogc_fid = ANY(t.visited)
     FROM statfi.pno_meri, t
         WHERE t.the_geom && pno_meri.wkb_geometry
	   AND ST_Overlaps(ST_Boundary(t.the_geom), ST_Boundary(pno_meri.wkb_geometry))
	   AND t.ogc_fid != pno_meri.ogc_fid
	   AND NOT ARRAY[pno_meri.ogc_fid] <@ t.visited
	   AND t.n < 5
	   AND NOT cycle
)
SELECT DISTINCT nimi, posti_alue, n, ST_Transform(the_geom, 900913) FROM t;


--
-- KNNGIST OpenStreetMap-pisteistä.
-- Huom. korvaa ::cp:: esim. pistemäisellä geometrialla.
--
SELECT way, ST_Distance(ST_SetSRID(::cp::::geometry, 900913), way)
FROM osm.osm_point
WHERE amenity = 'pub'
ORDER BY osm_point.way <-> ST_SetSRID(::cp::::geometry, 900913)
LIMIT 100;


--
-- KNNGIST OpenStreetMap-pisteistä (Karaokella)
-- Huom. korvaa ::cp:: esim. pistemäisellä geometrialla.
--
SELECT way, tags -> 'karaoke' AS karaoke, ST_Distance(ST_SetSRID(::cp::::geometry, 900913), way)
FROM osm.osm_point
WHERE amenity = 'pub'
  AND tags ? 'karaoke'
ORDER BY osm_point.way <-> ST_SetSRID(::cp::::geometry, 900913)
LIMIT 1000;


--
-- Mandelbrot SQL:llä
-- (vaatii Common Table Expression (CTE)-tuen).
--
-- Kysely sovitettu tästä esimerkistä
--
--  http://wiki.postgresql.org/wiki/Mandelbrot_set
--
-- niin, että Ascii-merkit on korvattu erikokoisilla
-- pisteillä.
--
--
WITH RECURSIVE
x(i)
AS (
    VALUES(0)
UNION ALL
    SELECT i + 1 FROM x WHERE i < 101
),
Z(Ix, Iy, Cx, Cy, X, Y, I)
AS (
    SELECT Ix, Iy, X::float, Y::float, X::float, Y::float, 0
    FROM
        (SELECT -2.2 + 0.031 * i, i FROM x) AS xgen(x,ix)
    CROSS JOIN
        (SELECT -1.5 + 0.031 * i, i FROM x) AS ygen(y,iy)
    UNION ALL
    SELECT Ix, Iy, Cx, Cy, X * X - Y * Y + Cx AS X, Y * X * 2 + Cy, I + 1
    FROM Z
    WHERE X * X + Y * Y < 16.0
    AND I < 27
),
Zt (Ix, Iy, I) AS (
    SELECT Ix, Iy, MAX(I) AS I
    FROM Z
    GROUP BY Iy, Ix
    ORDER BY Iy, Ix
)
SELECT ST_Translate(
	   ST_Buffer(
               ST_MakePoint(3000*Ix, 3000*Iy), 
	       20 + I*25),
	       -150000, 7100000, 0)
FROM Zt;


--
-- Tee verkosto maantieteellissä koordinaateissa.
--
SELECT ST_Transform(ST_SetSRID(ST_MakePoint(x.x, y.y), 4326), 3067)
       FROM (SELECT generate_series(10, 40, 1) x) x
       JOIN (SELECT generate_series(50, 80, 1) y) y
       ON true;


SELECT way FROM osm.osm_point
WHERE population IS NOT NULL
  AND CASE WHEN population ~ '^[0-9]+$' THEN population::int ELSE NULL END >= 1000;


Kyselyjä:

--
-- Tee verkosto maantieteellissä koordinaateissa.
--
SELECT ST_Transform(ST_SetSRID(ST_MakePoint(x.x, y.y), 4326), 3067)
       FROM (SELECT generate_series(10, 40, 1) x) x
       JOIN (SELECT generate_series(50, 80, 1) y) y
       ON true;


SELECT 'POINT(0 0)'::geometry;
SELECT ST_Multi('POINT(100000 100000)'::geometry);
SELECT 'POINT(100000 100000)'::geometry;


SELECT way FROM osm.osm_point
WHERE population IS NOT NULL
  AND CASE WHEN population ~ '^[0-9]+$' THEN population::int ELSE NULL END >= 1000;

SELECT way FROM osm.osm_line WHERE dataset = 'estonia' ;


SELECT way FROM osm.osm_polygon
WHERE dataset = 'estonia' ;

SELECT way FROM osm.osm_line
WHERE dataset = 'estonia'
  AND way && ::bbox::;

SELECT way FROM osm.osm_polygon
WHERE dataset = 'estonia'
  AND way && 'BOX3D(2756000 8276000, 2757000 8277000)'::box3d ;

SELECT way FROM osm.osm_polygon
WHERE dataset = 'estonia'
  AND way && 'BOX3D(2756000 8276000, 2757000 8277000)'::box3d
  AND ST_Area(way) < 1e6;


SELECT way FROM osm.osm_polygon
WHERE way && ::bbox::
  AND ST_Area(way) < 100e6;


SELECT way FROM osm.osm_point
WHERE dataset = 'estonia'
  AND way && 'BOX3D(2756000 8276000, 2757000 8277000)'::box3d ;


SELECT way FROM osm.osm_point
WHERE way && ::bbox::;

SELECT osm_id, name, ST_Transform(way, 4326) AS way 
FROM osm_parts.osm_finland_point
ORDER BY way <-> ST_Transform(ST_SetSRID(ST_MakePoint(24.924889, 60.171403), 4326), 900913)
LIMIT 10;

SELECT way 
FROM osm_parts.osm_finland_point
ORDER BY way <-> 'POINT(2774625.95155887 8437998.14510901)'
LIMIT 10;

SELECT way 
FROM osm.osm_point
ORDER BY way <-> ::cp::
LIMIT 1000;


--
-- Tee verkosto maantieteellissä koordinaateissa.
--
SELECT ST_Transform(ST_SetSRID(ST_MakePoint(x.x, y.y), 4326), 900913)
       FROM (SELECT generate_series(10, 40, 1) x) x
       JOIN (SELECT generate_series(50, 80, 1) y) y
       ON true;
